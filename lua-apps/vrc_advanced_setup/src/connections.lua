---@ext

ECU = ac.connect({
	ac.StructItem.key(ac.getCarID(0) .. "_ecu_" .. 0),
	connected = ac.StructItem.boolean(),
	displayPage = ac.StructItem.int16(),
	qsActiveIndex = ac.StructItem.int16(),
	requestedEngineRPM = ac.StructItem.float(),
	throttleBodyPosition = ac.StructItem.float(),
	requestedThrottleBodyPosition = ac.StructItem.float(),
	deploymentStrat = ac.StructItem.float(),
	rpm = ac.StructItem.int16(),
	torqueMap = ac.StructItem.int16(),
	torqueSplit = ac.StructItem.int16(),
	kersTorqueLevel = ac.StructItem.float(),
	kersInput = ac.StructItem.float(),
	kersCharge = ac.StructItem.float(),
	kersCurrentKJ = ac.StructItem.float(),
	kersOverrideCurrentKJ = ac.StructItem.float(),
	kersRechargeMode = ac.StructItem.boolean(),
	kersRecoveryLevel = ac.StructItem.float(),
	kersLapRechargeMJ = ac.StructItem.float(),
	brakeBiasLive = ac.StructItem.float(),
	brakeBiasPeak = ac.StructItem.float(),
	brakeBiasOffset = ac.StructItem.float(),
	brakeMigration = ac.StructItem.float(),
	brakeShapeMap = ac.StructItem.int16(),
	brakeBiasOffsetPosition = ac.StructItem.int16(),
	fuelUsePerLap = ac.StructItem.float(),
	fuelUseTarget = ac.StructItem.float(),
	diffModeCurrent = ac.StructItem.float(),
	differentialEntry = ac.StructItem.float(),
	differentialMid = ac.StructItem.float(),
	differentialExitHispd = ac.StructItem.float(),
	differentialMidHispdSwitch = ac.StructItem.int16(),
	damage = ac.StructItem.array(ac.StructItem.float(), 7),
	gearSync = ac.StructItem.array(ac.StructItem.boolean(), 9),
	gearsSynced = ac.StructItem.boolean(),
	mguhPriority = ac.StructItem.float(),
	isBrakeMagicActive = ac.StructItem.boolean(),
	isConstantSpeedLimiterActive = ac.StructItem.boolean(),
	engineBrakeSetting = ac.StructItem.int16(),
	antirollBarRearPosition = ac.StructItem.int16(),
	isAntistallActive = ac.StructItem.boolean(),
	isEngineStalled = ac.StructItem.boolean(),
	isEngineStarted = ac.StructItem.boolean(),
	isEngineRunning = ac.StructItem.boolean(),
	isStarterCranking = ac.StructItem.boolean(),
	isSteeringWheelConnected = ac.StructItem.boolean(),
	isIgnitionOn = ac.StructItem.boolean(),
	isElectronicsBooted = ac.StructItem.boolean(),
	isEboostActive = ac.StructItem.boolean(),
	isKersAntiActive = ac.StructItem.boolean(),
	isPitSpeedLimiterActive = ac.StructItem.boolean(),
	pitSpeedLimit = ac.StructItem.int16(),
	puMode = ac.StructItem.int16(),
	drsAvailable = ac.StructItem.boolean(),
	drsActive = ac.StructItem.boolean(),
	driverTargetStintLaps = ac.StructItem.int16(),
	driverTargetLapTime = ac.StructItem.int32(),
}, true, ac.SharedNamespace.CarScript)

QUICK_SWITCH = ac.connect({
	ac.StructItem.key(ac.getCarID(0) .. "_QUICK_SWITCHES_" .. 0),
	connected = ac.StructItem.boolean(),
	activeIndex = ac.StructItem.int16(),
	BRAKE_BIAS_OFFSET = ac.StructItem.int16(),
	BRAKE_SHAPE_MAP = ac.StructItem.int16(),
	ENGINE_BRAKE = ac.StructItem.int16(),
	DIFF_ENTRY = ac.StructItem.int16(),
	DIFF_MID = ac.StructItem.int16(),
	DIFF_EXIT_HISPD = ac.StructItem.int16(),
	DIFF_MID_HISPD_SWITCH = ac.StructItem.int16(),
}, true, ac.SharedNamespace.CarScript)

COLLIDERS = ac.connect({
	ac.StructItem.key(ac.getCarID(0) .. "_COLLIDERS_" .. 0),
	plankWear = ac.StructItem.float(),
	frontLegalityWear = ac.StructItem.float(),
	midLegalityWear = ac.StructItem.float(),
	rearLegalityWear = ac.StructItem.float(),
	installNewPlank = ac.StructItem.boolean(),
	frontWingDamage = ac.StructItem.array(ac.StructItem.boolean(), 3),
	collisionDepth = ac.StructItem.float(),
	collidedWith = ac.StructItem.int16(),
}, true, ac.SharedNamespace.Shared)

DRIVER_SETTINGS = ac.connect({
	ac.StructItem.key(ac.getCarID(0) .. "_DRIVER_SETTINGS_" .. 0),
	connected = ac.StructItem.boolean(),
	settingsChanged = ac.StructItem.boolean(),
	activeDisplay = ac.StructItem.int16(),
	drsTone = ac.StructItem.int16(),
	drsTonePan = ac.StructItem.float(),
	drsToneVolume = ac.StructItem.float(),
	drsTonePitch = ac.StructItem.float(),
	shiftTone = ac.StructItem.int16(),
	shiftTonePan = ac.StructItem.float(),
	shiftToneVolume = ac.StructItem.float(),
	shiftTonePitch = ac.StructItem.float(),
	displayPopupTime = ac.StructItem.int16(),
	displayLapPopupTime = ac.StructItem.int16(),
	displayInteriorDayBrightness = ac.StructItem.int16(),
	displayInteriorNightBrightness = ac.StructItem.int16(),
	displayExteriorDayBrightness = ac.StructItem.int16(),
	displayExteriorNightBrightness = ac.StructItem.int16(),
	ledTest = ac.StructItem.boolean(),
	ledRed = ac.StructItem.rgbm(),
	ledRedReset = ac.StructItem.boolean(),
	ledGreen = ac.StructItem.rgbm(),
	ledGreenReset = ac.StructItem.boolean(),
	ledBlue = ac.StructItem.rgbm(),
	ledBlueReset = ac.StructItem.boolean(),
	ledYellow = ac.StructItem.rgbm(),
	ledYellowReset = ac.StructItem.boolean(),
	ledPurple = ac.StructItem.rgbm(),
	ledPurpleReset = ac.StructItem.boolean(),
	ledShiftPattern = ac.StructItem.int16(),
}, true, ac.SharedNamespace.CarScript)

EXT_DATA = ac.connect({
	ac.StructItem.key(ac.getCarID(0) .. "_EXT_DATA_" .. 0),
	steeringWheel = ac.StructItem.int16(),
	aeroKit = ac.StructItem.int16(),
	tyreWear = ac.StructItem.array(ac.StructItem.float(), 4),
}, true, ac.SharedNamespace.CarScript)
